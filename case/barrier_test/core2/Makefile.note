# CROSS_COMPILE      ?= riscv64-unknown-elf-
CROSS_COMPILE      ?= riscv32-unknown-elf-

AR                 = $(CROSS_COMPILE)ar

CFLAGS             = -mcmodel=medany -ffunction-sections -fdata-sections
LDFLAGS            = -nostartfiles -nostdlib -nostdinc -static -lgcc \
                     -Wl,--nmagic -Wl,--gc-sections
INCLUDES           = -Ienv/common

libfemto_dirs      = libfemto/std libfemto/drivers libfemto/arch/riscv

# 在Makefile规则中，通配符会被自动展开。但在变量的定义和函数引用时，通配符将失效。这种情况下如果需要通配符有效，
# 就需要使用函数“wildcard”，它的用法是：$(wildcard PATTERN...) 。在Makefile中，它被展开为已经存在的、
# 使用空格分开的、匹配此模式的所有文件列表。如果不存在任何符合此模式的文件，函数会忽略模式字符并返回空。需要注意的是：
# 这种情况下规则中通配符的展开和上一小节匹配通配符的区别。

# sort排序的列表
# libfemto/arch/riscv/auxval.c ...
libfemto_src       = 	$(sort 
							$(foreach d,$(libfemto_dirs),
								$(wildcard $(d)/*.c)
							)
						)
libfemto_asm       = 	$(sort 
							$(foreach d,$(libfemto_dirs),
								$(wildcard $(d)/*.s)
							)
						)

# 一般我们可以使用“$(wildcard *.c)”来获取工作目录下的所有的.c文件列表。复杂一些用法；可以使用“$(patsubst %.c,%.o,$(wildcard *.c))”，
# 首先使用“wildcard”函数获取工作目录下的.c文件列表；之后将列表中所有文件名的后缀.c替换为.o。这样我们就可以得到在当前目录可生成的.o文件列表。

# 替换.c/.s为.o，得到目标文件列表
libfemto_objs      = $(patsubst %.s,%.o,$(libfemto_asm)) \
                     $(patsubst %.c,%.o,$(libfemto_src))

#
# Compiler configurations and target environment definitions
#

subdirs            = hipu_examples
# subdirs            = 

libs               = libfemto

# configs            = rv32imac rv64imac
configs            = rv32imac

CC_rv32imac        = $(CROSS_COMPILE)gcc
CFLAGS_rv32imac    = -Os -march=rv32imac -mabi=ilp32 -Ienv/common/rv32
LDFLAGS_rv32imac   =

# CC_rv64imac        = $(CROSS_COMPILE)gcc
# CFLAGS_rv64imac    = -Os -march=rv64imac -mabi=lp64  -Ienv/common/rv64
# LDFLAGS_rv64imac   =

# targets            = rv32imac:default \
#                      rv64imac:default \
#                      rv32imac:spike \
#                      rv64imac:spike \
#                      rv32imac:virt \
#                      rv64imac:virt \
#                      rv32imac:qemu-sifive_e \
#                      rv64imac:qemu-sifive_e \
#                      rv32imac:qemu-sifive_u \
#                      rv64imac:qemu-sifive_u \
#                      rv32imac:coreip-e2-arty

targets            = rv32imac:qemu-sifive_e 

#
# make rules
#

all: all_programs

clean:
	rm -fr build

backup: clean
	tar czf ../$(shell basename $(shell pwd)).tar.gz .

#
# To view commands use: make V=1
#

# 1: 显示信息 e.g. CC.rv32imac build/obj/rv32imac/env/qemu-sifive_e/setup.o
# 2: path
# 3: cmd line
ifdef V
cmd = @mkdir -p $2 ; echo "$3"; $3
else
cmd = @echo "$1"; mkdir -p $2 ; $3
endif

#
# Build system functions to generate pattern rules for all configs
#

# 使用CC/AS编译(.c/.s)的指令格式: riscv32-unknown-elf-gcc -Os ... -o build/obj/rv32imac/libfemto/arch/riscv/auxval.o
# 1: 字符CC/AS  
# 2: config(rv32imac)  
# 3: 字符c/s
# $@ 目标的完整名称 
# $(@D) 表示"$@"的目录部分
# $(INCLUDES)
# $^ 所有的依赖文件
define pattern =
build/obj/$(2)/%.o: %.$(3)
	$(call cmd,		$(1).$(2) $$@,		$$(@D),		$(CC_$(2)) $(CFLAGS_$(2)) $(CFLAGS) $$(INCLUDES) -c $$^ -o $$@	)
endef

# 用 eval 生成所有config(rv32imac)的c代码的build rule
$(foreach c,$(configs),
	$(eval 
		$(call pattern,		CC,		$(c),	c	)
	)
)

# 用 eval 生成所有config(rv32imac)的s代码的build rule
$(foreach c,$(configs),
	$(eval 
		$(call pattern,		AS,		$(c),	s	)
	)
)

#
# Build system functions to generate library rules for all configs
#

# 使用AS生成库文件的指令格式: riscv32-unknown-elf-ar cr build/lib/rv32imac/libfemto.a build/obj/rv32imac/libfemto/arch/riscv/auxval.o ...
# 1： 字符AR
# 2： config(rv32imac)  
# 3： libs中的一个元素(libfemto)， $(3)_objs： libfemto/arch/riscv/auxval.o ...
# LIBS_$(2): config架构下lib库的库文件
# $(addprefix <prefix>,<names...> )
# $@ 目标的完整名称 
# $(@D) 表示"$@"的目录部分
# $^ 所有的依赖文件
define archive =
build/lib/$(2)/$(3).a: $(addprefix build/obj/$(2)/,$($(3)_objs)	)
	$(call 	cmd,	$(1).$(2) $$@,		$$(@D),		$(AR) cr $$@ $$^)
LIBS_$(2) += build/lib/$(2)/$(3).a
endef


# 使用 eval 生成所有config(rv32imac)的库文件的指令格式
# 1： libs中的一个元素(仅有libfemto)
define lib =
$(foreach c,$(configs),
	$(eval 
		$(call archive,		AR,		$(c),		$(1)	)
	)
)
INCLUDES += -I$(1)/include
endef

# 使用 eval 生成所有依赖库(仅有libfemto)的编译rule
$(foreach l,$(libs),
	$(eval 
		$(call lib,		$(l))
	)
)

#
# Build system functions to generate build rules for all
#

# 列出所有的example rules: hipu_examples/hello/rules.mk
# subdirs = hipu_examples
sub_makes := 	$(foreach dir,$(subdirs),
					$(wildcard ${dir}/*/rules.mk)
				)

# 在Makefile使用include关键字可以把别的Makefile包含进来，这很像C语言的#include，
# 被包含的文件会原模原样的放在当前文件的包含位置。
# 读入example中的makefile内容: hello_objs = hello.o
$(foreach makefile,$(sub_makes),
	$(eval include $(makefile))
)

# hipu_examples/hello/rules.mk：/rules.mk=  hipu_examples/hello
sub_dirs := $(foreach m,$(sub_makes),
				$(m:/rules.mk=)
			)

# 列出所有的 example module name
# 函数“subst”，这是一个替换函数，这个函数有三个参数，第一个参数是被替换字串，
# 第二个参数是替换字串，第三个参数是替换操作作用的字串。
# 1: hipu_examples/hello
# module_name = hello
module_name = $(lastword 	$(subst 	/, 	,	$(1)	)	)

# 列出example的目标.o文件：build/obj/rv32imac/hipu_examples/hello/hello.o
# 1: module_name: hello
# 2: module路径: hipu_examples/hello
# 3: config(rv32imac)
module_objs = $(addprefix 
					build/obj/$(3)/,
					$(addprefix 	$(2)/,	$($(1)_objs))
				)

# 1： target = rv32imac:qemu-sifive_e
# config_arch = rv32imac
config_arch = $(word 1,$(subst :, ,$(1)))

# 1： target = rv32imac:qemu-sifive_e
# config_env = qemu-sifive_e
config_env = $(word 2,$(subst :, ,$(1)))

# 给定module，生成目标exmple.elf 文件的编译rule
# 1: module_name: hello
# 2: module目标.o文件: build/obj/rv32imac/hipu_examples/hello/hello.o
# 3: config(rv32imac) $(LIBS_$(3)): config架构下lib库的库文件
# 4: target(qemu-sifive_e)
define  =
build/bin/$(3)/$(4)/$(1): \
	build/obj/$(3)/env/$(4)/crt.o 
	build/obj/$(3)/env/$(4)/setup.o 
	$(2) 
	$$(LIBS_$(3))
	$$(call cmd,	
			LD.$(3) $$@,	
			$$(@D), 	
			$(CC_$(3)) $(CFLAGS_$(3)) $$(CFLAGS) $$(LDFLAGS_$(3)) $$(LDFLAGS) -T env/$(4)/default.lds $$^  -o $$@
	)
endef

# 给定example，生成对应的目标elf
# cfg仅有 rv32imac:qemu-sifive_e 
# build/bin/rv32imac/qemu-sifive_e/$(1)
# 1: module_name: hello
# 2: module路径: hipu_examples/hello
# program_names 列出了所有的目标elf
define module =
program_names += 	$(foreach cfg,$(targets),
						build/bin/	$(call config_arch,	$(cfg)	)	/	$(call config_env,	$(cfg)	)	/	$(1)
					)

# 输入 module, 生成目标elf的编译rule
$(foreach cfg,$(targets),
	$(eval 
		$(call rule,	
					$(1),	
					$(call module_objs,
								$(1),
								$(2),
								$(call config_arch,		$(cfg) 	)
					),
					$(call config_arch,		$(cfg)	),
					$(call config_env,		$(cfg)	)
		)
	)
)
endef

# d: hipu_examples/hello
$(foreach d,$(sub_dirs),
	$(eval 
		$(call module,
				$(call module_name, 	$(d)	),
				$(d)
		)
	)
)

all_programs: $(program_names)
